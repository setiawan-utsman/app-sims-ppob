{"version":3,"file":"static/js/194.f03b5921.chunk.js","mappings":"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","sources":["app/page/Auth/SigninPage.tsx","app/services/api.service.ts","app/services/main.service.ts","styles/styled/flex.styled.ts"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport { Alert, Button, Col, Form, Row } from 'react-bootstrap'\r\nimport { DFlex, DFlexColumn } from '../../../styles/styled/flex.styled'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { postRequest } from '../../services/main.service';\r\nimport { get } from 'lodash';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginUser } from '../../../store/reducers/auth';\r\n\r\nexport default function SigninPage() {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const formRef = useRef<any>({})\r\n    const [message, setMessage] = React.useState<any>();\r\n\r\n    const handleLogin = () => {\r\n        const listKey = [\"email\", \"password\"];\r\n        let objParams: any = {}\r\n\r\n        listKey?.map((obj: any) => {\r\n            objParams[obj] = formRef.current[obj]?.value\r\n        })\r\n        serviceLogin(objParams)\r\n    }\r\n\r\n    const serviceLogin = async (params: any) => {\r\n        await new Promise((resolve) => setTimeout(resolve, 300))\r\n        try {\r\n            const req = await postRequest({ path: `https://take-home-test-api.nutech-integrasi.com/login`, params })\r\n            const dt = get(req, 'data')\r\n            const message = get(req, 'message')\r\n            if (Boolean(dt)) {\r\n                toast.success(message, {\r\n                position: \"top-right\",\r\n                autoClose: 4000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: \"light\",\r\n                });\r\n                dispatch(\r\n                    loginUser({\r\n                      access: dt?.token,\r\n                    }),\r\n                  )\r\n                  navigate('/topup')\r\n            }\r\n\r\n        } catch (e) {\r\n            const message = get(e, 'response.data.message')\r\n            setMessage(message)\r\n        }\r\n    }\r\n\r\n    const handleSignUp = () => {\r\n        navigate('/signup')\r\n    }\r\n\r\n    return (\r\n        <Row className='g-0'>\r\n            <Col md={6}>\r\n                <Row className='vh-100 d-flex justify-content-center align-items-center'>\r\n                    <Col md={5}>\r\n\r\n                            <Alert show={Boolean(message)} variant='danger'>\r\n                                {message}\r\n                            </Alert>\r\n\r\n                            <DFlexColumn className='w-100'>\r\n                                <DFlex className='gap-3 align-items-center justify-content-center w-100'>\r\n                                    <div><img src=\"\\static\\logo.png\" alt=\"\" /></div>\r\n                                    <div className='fw-500'>SIMS PPOB</div>\r\n                                </DFlex>\r\n                                <div className='fs-20 lh-sm text-center w-100 fw-500 my-3'>Masuk atau buat akun untuk memulai</div>\r\n                                <DFlexColumn className='w-100'>\r\n                                    <Form.Control type=\"email\" className='fs-12' placeholder=\"Masukan email anda\"\r\n                                        ref={(el: any) => (formRef.current[`email`] = el)} />\r\n                                    <Form.Control type=\"password\" className='fs-12' placeholder=\"Masukan password anda\"\r\n                                        ref={(el: any) => (formRef.current[`password`] = el)} />\r\n                                </DFlexColumn>\r\n\r\n                                <Button variant='danger' className='w-100' onClick={handleLogin} onKeyUp={handleLogin}>Masuk</Button>\r\n                                <div className='mt-4 text-center fs-12 w-100'>\r\n                                    Belum punya akun? Register <span className='fw-500 text-danger cursor-pointer' onClick={handleSignUp}>di sini</span>\r\n                                </div>\r\n                            </DFlexColumn>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            <Col md={6}>\r\n                <div style={{ height: \"100vh\" }}><img className='w-100 h-100' src=\"\\static\\IllustrasiLogin.png\" alt=\"\" /></div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\nimport { pick, replace } from 'lodash'\r\nimport store from \"../../store\"\r\n\r\nconst requestApi = (responseFields: any = null, baseUrl = undefined) => {\r\n    let sourceRequest: any = {}\r\n  \r\n    /** CREATE AXIOS INSTANCE */\r\n    const axiosInstance = axios.create({\r\n      baseURL: baseUrl ? baseUrl : process.env.API_BASE_URL,\r\n    })\r\n  \r\n    /** HANDLE AXIOS REQUEST */\r\n    // axiosInstance.interceptors.request.use(async (config: any) => {\r\n    //   // Removed Bearer token logic\r\n    //   return config\r\n    // })\r\n\r\n    axiosInstance.interceptors.request.use(async (config: any) => {\r\n      const { credentials } = store.getState().auth\r\n  \r\n      if (credentials?.access) {\r\n        config.headers.Authorization = `Bearer ${credentials.access}`\r\n      }\r\n  \r\n      return config\r\n    })\r\n  \r\n    axiosInstance.interceptors.request.use((request: any) => {\r\n      // If the application exists cancel\r\n      if (sourceRequest[request.url]) {\r\n        sourceRequest[request.url].cancel('Automatic cancellation')\r\n      }\r\n      return request\r\n    })\r\n  \r\n    /** HANDLE AXIOS RESPONSE */\r\n    axiosInstance.interceptors.response.use(\r\n      (resp) => {\r\n        if (responseFields) return pick(resp, responseFields)\r\n        return resp?.data\r\n      },\r\n      async (error) => {\r\n        const originalConfig = error.config\r\n  \r\n        // if (originalConfig?.url !== process.env.API_MAIN_SERVICE + '/v1/auth/login' && error.response) {\r\n        //   if (originalConfig?.method == 'get' && error.response.status !== 401) {\r\n        //     // const notification = notificationTemplate(error?.message, 'danger')\r\n        //     // const respMsg = error.response?.data?.message ? replace(error.response?.data?.message, 'Page', 'Path') : ''\r\n        //     // let msg1 = error.message ? `${respMsg}` : ''\r\n        //     // msg1 = msg1 ? msg1 : 'Oops... Something not working properly.'\r\n        //     // store.dispatch(\r\n        //     //   addNotification({\r\n        //     //     ...notification,\r\n        //     //     title: `Error ${error.response.status}`,\r\n        //     //     message: [msg1],\r\n        //     //     type: 'danger',\r\n        //     //   }),\r\n        //     // )\r\n        //   }\r\n        // }\r\n  \r\n        return Promise.reject(error)\r\n      },\r\n    )\r\n    return axiosInstance\r\n  }\r\n\r\nexport default requestApi\r\n","import requestApi from \"./api.service\"\r\n\r\nconst postRequest = ({ path, params, sourceToken }: any) => {\r\n    return requestApi().post(\r\n      `${path}`,\r\n      params,\r\n      { cancelToken: sourceToken }, // <-- IMPORTANT!\r\n    )\r\n  }\r\n\r\n  const getAll = (path: any = null, params: any = {}, sourceToken: any) => {\r\n    return requestApi().request({\r\n      url: path,\r\n      method: 'GET',\r\n      params: params,\r\n      cancelToken: sourceToken, // <-- IMPORTANT!\r\n    })\r\n  }\r\n\r\n  export { postRequest, getAll }","import styled from \"styled-components\";\r\n\r\nconst DFlex = styled.div`\r\n  display: flex !important;\r\n  gap: 1rem;\r\n  align-items: center;\r\n`\r\n\r\nconst DFlexColumn = styled(DFlex)`\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`\r\n\r\n\r\nexport {DFlex, DFlexColumn}\r\n"],"names":["SigninPage","dispatch","useDispatch","navigate","useNavigate","formRef","useRef","message","setMessage","React","handleLogin","listKey","objParams","map","obj","_formRef$current$obj","current","value","serviceLogin","async","Promise","resolve","setTimeout","req","postRequest","path","params","dt","get","Boolean","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","loginUser","access","token","e","_jsxs","Row","className","children","_jsx","Col","md","Alert","show","variant","DFlexColumn","DFlex","src","alt","Form","Control","type","placeholder","ref","el","Button","onClick","onKeyUp","handleSignUp","style","height","responseFields","arguments","length","baseUrl","sourceRequest","axiosInstance","axios","create","baseURL","process","API_BASE_URL","interceptors","request","use","credentials","store","getState","auth","config","headers","Authorization","url","cancel","response","resp","pick","data","error","reject","_ref","sourceToken","requestApi","post","cancelToken","getAll","method","styled","div"],"sourceRoot":""}